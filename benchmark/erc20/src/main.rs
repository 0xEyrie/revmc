//! Simple compiler worker example.

use revm::{
    db::{ CacheDB, EmptyDB, EmptyDBTyped },
    primitives::{ address, hex, Address, ExecutionResult, TransactTo },
    Evm,
};
use revmc_worker::{ register_handler, EXTCompileWorker };
use std::{ convert::Infallible, ops::{ Add, Div }, sync::Arc, time::Duration };
use std::time::Instant;

pub const ERC20_CODE: &[u8] = &hex!(
    "608060405234801561001057600080fd5b50611de4806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c806306ef1a861462000033575b600080fd5b6200005160048036038101906200004b919062000341565b62000069565b60405162000060919062000420565b60405180910390f35b6000808484846040516200007d906200017f565b6200008b93929190620004d7565b604051809103906000f080158015620000a8573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620000e6919062000420565b600060405180830381600087803b1580156200010157600080fd5b505af115801562000116573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f85e892981b234101136bc30081e0a5c44345bebc0940193230c20a43b279e2d160405160405180910390a3809150509392505050565b61188c806200052383390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f682620001ab565b810181811067ffffffffffffffff82111715620002185762000217620001bc565b5b80604052505050565b60006200022d6200018d565b90506200023b8282620001eb565b919050565b600067ffffffffffffffff8211156200025e576200025d620001bc565b5b6200026982620001ab565b9050602081019050919050565b82818337600083830152505050565b60006200029c620002968462000240565b62000221565b905082815260208101848484011115620002bb57620002ba620001a6565b5b620002c884828562000276565b509392505050565b600082601f830112620002e857620002e7620001a1565b5b8135620002fa84826020860162000285565b91505092915050565b600060ff82169050919050565b6200031b8162000303565b81146200032757600080fd5b50565b6000813590506200033b8162000310565b92915050565b6000806000606084860312156200035d576200035c62000197565b5b600084013567ffffffffffffffff8111156200037e576200037d6200019c565b5b6200038c86828701620002d0565b935050602084013567ffffffffffffffff811115620003b057620003af6200019c565b5b620003be86828701620002d0565b9250506040620003d1868287016200032a565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040882620003db565b9050919050565b6200041a81620003fb565b82525050565b60006020820190506200043760008301846200040f565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620004795780820151818401526020810190506200045c565b60008484015250505050565b600062000492826200043d565b6200049e818562000448565b9350620004b081856020860162000459565b620004bb81620001ab565b840191505092915050565b620004d18162000303565b82525050565b60006060820190508181036000830152620004f3818662000485565b9050818103602083015262000509818562000485565b90506200051a6040830184620004c6565b94935050505056fe60806040523480156200001157600080fd5b506040516200188c3803806200188c833981810160405281019062000037919062000290565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826003908162000088919062000575565b5081600490816200009a919062000575565b5080600560006101000a81548160ff021916908360ff1602179055505050506200065c565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012882620000dd565b810181811067ffffffffffffffff821117156200014a5762000149620000ee565b5b80604052505050565b60006200015f620000bf565b90506200016d82826200011d565b919050565b600067ffffffffffffffff82111562000190576200018f620000ee565b5b6200019b82620000dd565b9050602081019050919050565b60005b83811015620001c8578082015181840152602081019050620001ab565b60008484015250505050565b6000620001eb620001e58462000172565b62000153565b9050828152602081018484840111156200020a5762000209620000d8565b5b62000217848285620001a8565b509392505050565b600082601f830112620002375762000236620000d3565b5b815162000249848260208601620001d4565b91505092915050565b600060ff82169050919050565b6200026a8162000252565b81146200027657600080fd5b50565b6000815190506200028a816200025f565b92915050565b600080600060608486031215620002ac57620002ab620000c9565b5b600084015167ffffffffffffffff811115620002cd57620002cc620000ce565b5b620002db868287016200021f565b935050602084015167ffffffffffffffff811115620002ff57620002fe620000ce565b5b6200030d868287016200021f565b9250506040620003208682870162000279565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037d57607f821691505b60208210810362000393576200039262000335565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003fd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003be565b620004098683620003be565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000456620004506200044a8462000421565b6200042b565b62000421565b9050919050565b6000819050919050565b620004728362000435565b6200048a62000481826200045d565b848454620003cb565b825550505050565b600090565b620004a162000492565b620004ae81848462000467565b505050565b5b81811015620004d657620004ca60008262000497565b600181019050620004b4565b5050565b601f8211156200052557620004ef8162000399565b620004fa84620003ae565b810160208510156200050a578190505b620005226200051985620003ae565b830182620004b3565b50505b505050565b600082821c905092915050565b60006200054a600019846008026200052a565b1980831691505092915050565b600062000565838362000537565b9150826002028217905092915050565b62000580826200032a565b67ffffffffffffffff8111156200059c576200059b620000ee565b5b620005a8825462000364565b620005b5828285620004da565b600060209050601f831160018114620005ed5760008415620005d8578287015190505b620005e4858262000557565b86555062000654565b601f198416620005fd8662000399565b60005b82811015620006275784890151825560018201915060208501945060208101905062000600565b8683101562000647578489015162000643601f89168262000537565b8355505b6001600288020188555050505b505050505050565b611220806200066c6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806342966c68116100a257806395d89b411161007157806395d89b41146102f3578063a9059cbb14610311578063dd62ed3e14610341578063f2fde38b14610371578063fe1195ec1461038d57610116565b806342966c681461025957806370a082311461027557806379cc6790146102a55780638da5cb5b146102d557610116565b80631988513b116100e95780631988513b146101b757806323b872dd146101d35780632d688ca814610203578063313ce5671461021f57806340c10f191461023d57610116565b806301ffc9a71461011b57806306fdde031461014b578063095ea7b31461016957806318160ddd14610199575b600080fd5b61013560048036038101906101309190610d92565b6103a9565b6040516101429190610dda565b60405180910390f35b610153610423565b6040516101609190610e85565b60405180910390f35b610183600480360381019061017e9190610f3b565b6104b1565b6040516101909190610dda565b60405180910390f35b6101a16105a3565b6040516101ae9190610f8a565b60405180910390f35b6101d160048036038101906101cc9190610fa5565b6105a9565b005b6101ed60048036038101906101e89190610fa5565b6105b9565b6040516101fa9190610dda565b60405180910390f35b61021d60048036038101906102189190610f3b565b610664565b005b610227610672565b6040516102349190611014565b60405180910390f35b61025760048036038101906102529190610f3b565b610685565b005b610273600480360381019061026e919061102f565b6106eb565b005b61028f600480360381019061028a919061105c565b6106f8565b60405161029c9190610f8a565b60405180910390f35b6102bf60048036038101906102ba9190610f3b565b610710565b6040516102cc9190610dda565b60405180910390f35b6102dd6107b9565b6040516102ea9190611098565b60405180910390f35b6102fb6107dd565b6040516103089190610e85565b60405180910390f35b61032b60048036038101906103269190610f3b565b61086b565b6040516103389190610dda565b60405180910390f35b61035b600480360381019061035691906110b3565b610882565b6040516103689190610f8a565b60405180910390f35b61038b6004803603810190610386919061105c565b6108a7565b005b6103a760048036038101906103a29190610f3b565b6109f5565b005b60007f8da6da19000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041c575061041b82610a03565b5b9050919050565b6003805461043090611122565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90611122565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105919190610f8a565b60405180910390a36001905092915050565b60065481565b6105b4838383610a6d565b505050565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106479190611182565b92505081905550610659848484610a6d565b600190509392505050565b61066e8282610b83565b5050565b600560009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106dd57600080fd5b6106e78282610b83565b5050565b6106f53382610c5c565b50565b60016020528060005260406000206000915090505481565b600081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461079e9190611182565b925050819055506107af8383610c5c565b6001905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600480546107ea90611122565b80601f016020809104026020016040519081016040528092919081815260200182805461081690611122565b80156108635780601f1061083857610100808354040283529160200191610863565b820191906000526020600020905b81548152906001019060200180831161084657829003601f168201915b505050505081565b6000610878338484610a6d565b6001905092915050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ff57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361093857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6109ff8282610c5c565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610abc9190611182565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b1291906111b6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b769190610f8a565b60405180910390a3505050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bd291906111b6565b925050819055508060066000828254610beb91906111b6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c509190610f8a565b60405180910390a35050565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cab9190611182565b925050819055508060066000828254610cc49190611182565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610d299190610f8a565b60405180910390a35050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610d6f81610d3a565b8114610d7a57600080fd5b50565b600081359050610d8c81610d66565b92915050565b600060208284031215610da857610da7610d35565b5b6000610db684828501610d7d565b91505092915050565b60008115159050919050565b610dd481610dbf565b82525050565b6000602082019050610def6000830184610dcb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e2f578082015181840152602081019050610e14565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e5782610df5565b610e618185610e00565b9350610e71818560208601610e11565b610e7a81610e3b565b840191505092915050565b60006020820190508181036000830152610e9f8184610e4c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ed282610ea7565b9050919050565b610ee281610ec7565b8114610eed57600080fd5b50565b600081359050610eff81610ed9565b92915050565b6000819050919050565b610f1881610f05565b8114610f2357600080fd5b50565b600081359050610f3581610f0f565b92915050565b60008060408385031215610f5257610f51610d35565b5b6000610f6085828601610ef0565b9250506020610f7185828601610f26565b9150509250929050565b610f8481610f05565b82525050565b6000602082019050610f9f6000830184610f7b565b92915050565b600080600060608486031215610fbe57610fbd610d35565b5b6000610fcc86828701610ef0565b9350506020610fdd86828701610ef0565b9250506040610fee86828701610f26565b9150509250925092565b600060ff82169050919050565b61100e81610ff8565b82525050565b60006020820190506110296000830184611005565b92915050565b60006020828403121561104557611044610d35565b5b600061105384828501610f26565b91505092915050565b60006020828403121561107257611071610d35565b5b600061108084828501610ef0565b91505092915050565b61109281610ec7565b82525050565b60006020820190506110ad6000830184611089565b92915050565b600080604083850312156110ca576110c9610d35565b5b60006110d885828601610ef0565b92505060206110e985828601610ef0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061113a57607f821691505b60208210810361114d5761114c6110f3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061118d82610f05565b915061119883610f05565b92508282039050818111156111b0576111af611153565b5b92915050565b60006111c182610f05565b91506111cc83610f05565b92508282019050808211156111e4576111e3611153565b5b9291505056fea2646970667358221220384786f55c2a59e92e8120a8516f3911b722834ddca4e170d1a3952e181d7d4464736f6c63430008140033a264697066735822122094aadaf380db9dc4954e93566048048edc03a7c0cf18ccef55adc59bd1c146e464736f6c63430008140033"
);

pub const ERC20_CONSTRUCTOR_ARGUMENT: &[u8] = &hex!(
    "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004746573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027474000000000000000000000000000000000000000000000000000000000000"
);

// mint(address(b), 1000000000000000000000000000000000000000)
const MINT_CALLDATA: &[u8] = &hex!(
    "40c10f19000000000000000000000000000000000000000000000000000000000000000b00000000000000000000000000000002f050fe938943acc45f65568000000000"
);

// transfer(address(c), 500000000000000000000000000000000000000)
const TRANSFER_CALLDATA: &[u8] = &hex!(
    "a9059cbb000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000178287f49c4a1d6622fb2ab4000000000"
);

// approve(address(c), 500000000000000000000000000000000000000)
const APPROVE_CALLDATA: &[u8] = &hex!(
    "095ea7b3000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000178287f49c4a1d6622fb2ab4000000000"
);

fn execute_erc20<T>(evm: &mut Evm<'_, T, CacheDB<EmptyDBTyped<Infallible>>>, iter: u32) {
    evm.context.evm.env.tx.caller = address!("000000000000000000000000000000000000000b");
    evm.context.evm.env.tx.transact_to = TransactTo::Create;
    evm.context.evm.env.tx.data = [ERC20_CODE, ERC20_CONSTRUCTOR_ARGUMENT].concat().into();
    let result = evm.transact().unwrap().result;

    let output = match result {
        ExecutionResult::Success { output, .. } => output,
        _ => { panic!("Failed to create erc20 contract") }
    };

    let erc20_address: Address = *output.address().unwrap();
    evm.context.evm.env.tx.caller = address!("000000000000000000000000000000000000000b");
    evm.context.evm.env.tx.transact_to = TransactTo::Call(erc20_address);
    // mint
    let mut mint_duration_sum = Duration::new(0, 0);
    for _ in 0..iter {
        evm.context.evm.env.tx.data = MINT_CALLDATA.into();
        let timer = Instant::now();
        match evm.transact().unwrap().result {
            ExecutionResult::Success { .. } => {}
            _ => panic!("Failed to create contract"),
        }
        let duration = timer.elapsed();
        mint_duration_sum = mint_duration_sum.add(duration);
    }
    println!("Mint Execution Mean time: {:?}", mint_duration_sum.div(iter));

    // transfer
    let mut transfer_duration_sum = Duration::new(0, 0);
    for _ in 0..iter {
        evm.context.evm.env.tx.data = TRANSFER_CALLDATA.into();
        let timer = Instant::now();
        match evm.transact().unwrap().result {
            ExecutionResult::Success { .. } => {}
            _ => panic!("Failed to create contract"),
        }
        let duration = timer.elapsed();
        transfer_duration_sum = transfer_duration_sum.add(duration);
    }
    println!("Transfer Execution Mean time: {:?}", transfer_duration_sum.div(iter));

    // approve
    let mut approve_duration_sum = Duration::new(0, 0);
    for _ in 0..iter {
        evm.context.evm.env.tx.data = APPROVE_CALLDATA.into();
        let timer = Instant::now();
        match evm.transact().unwrap().result {
            ExecutionResult::Success { .. } => {}
            _ => panic!("Failed to create contract"),
        }
        let duration = timer.elapsed();
        approve_duration_sum = approve_duration_sum.add(duration);
    }
    println!("Approve Execution Mean time: {:?}", approve_duration_sum.div(iter));
}

fn erc20() {
    let db = CacheDB::new(EmptyDB::new());
    let mut evm = revm::Evm::builder().with_db(db).build();
    execute_erc20::<()>(&mut evm, 10000);
}

fn erc20_with_aot_compiler() {
    let ext_worker = Arc::new(EXTCompileWorker::new(1, 3, 128));
    let db = CacheDB::new(EmptyDB::new());
    let mut evm = revm::Evm
        ::builder()
        .with_db(db)
        .with_external_context(ext_worker.clone())
        .append_handler_register(register_handler)
        .build();
    execute_erc20::<Arc<EXTCompileWorker>>(&mut evm, 10000);
}

/// First call executes the transaction and compiles into embedded db
/// embedded db: ~/.aotstore/db, ~/.aotstore/output
/// It is crucial to reset the embedded db and do 'cargo clean' for reproducing the same steps
/// Otherwise, both calls will utilize cached ExternalFn or unexpected behavior will happen
///
/// Second call loads the ExternalFn from embedded db to cache
/// and executes transaction with it
fn main() {
    println!("Call ERC20 Contract With Interpreter");
    erc20();

    println!("Call ERC20 Contract With AOT Compiler");
    erc20_with_aot_compiler();

    std::thread::sleep(Duration::from_secs(3));
    println!("Call ERC20 Contract With AOT Compiler");
    erc20_with_aot_compiler();
}
